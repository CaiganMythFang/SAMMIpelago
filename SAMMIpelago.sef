[extension_name]
SAMMIpelago


[extension_info]
Notify SAMMI when items are collected in an Archipelago instance.

Written by Caigan and Erdenshire


[insert_external]
<style>
  #SAMMIpelagoFormFields {
    display: inline-flex;
    flex-direction: column;
  }
  
  .wrapper {
    display: flex;
    justify-content: space-between;
    width: 98%;
  }
  
  #SAMMIpelagoFormFields label {
    font-weight: bold;
  }
  
  #SAMMIpelagoFormFields input {
    margin-left: 10px;
  }
</style>

<div>
  <h1>SAMMIpelago</h1>
  <small>Notifies SAMMI of activity in Archipelago</small>
  <div id="SAMMIpelagoFormFields">
    <!-- Fields are autogenerated in the <script> block below. -->
  </div>
  <p>Note: changes are only applied on connect.</p>
  <a href="https://docs.google.com/document/d/1TLdXEvEttrpAO0HhtxrtCHOQoRcQzSiuueUMl4NHldo/edit">Open documentation</a>
  <p class="wrapper">
    <button id="SAMMIpelagoConnectButton">Connect</button>
    <button id="SAMMIpelagoDisconnectButton" disabled>Disconnect</button>
  </p>
</div>

<script>
function addField(parent, fieldDefinition) {
  /* Add a wrapper for each label-input pair */
  const wrapper = document.createElement("p");
  wrapper.classList.add("wrapper");
  parent.appendChild(wrapper);

  /* Add the label with the field's name */
  const label = document.createElement("label");
  label.appendChild(document.createTextNode(fieldDefinition.name))
  wrapper.appendChild(label)

  /* Add the input with the field's stored value, defined default, or empty string. */
  const fieldId = `SAMMIpelagoField${fieldDefinition.name}`;
  const input = document.createElement("input");
  input.id = fieldId;
  input.type = fieldDefinition.type || "text"
  if (fieldDefinition.type && (fieldDefinition.type === "checkbox")) {
    input.checked = (window.localStorage.getItem(fieldId) === 'true') || false;  
  } else {
    input.value = window.localStorage.getItem(fieldId) || fieldDefinition.default || "";
  }
  wrapper.appendChild(input)
}

/* All fields that will be inserted into the SAMMIpelagoFormFields section */
const FIELDS = [
  { name: "Server", default: "archipelago.gg" },
  { name: "Port", default: "38281" },
  { name: "Name", },
  { name: "Password", type: "password" },
  // { name: "Separate Messages", type: "checkbox", default: false },
  { name: "Send Raw Bounced Message", type: "checkbox", default: false },
  { name: "Send Raw Datapackage Messages", type: "checkbox", default: false },
  { name: "Send Raw LocationInfo Message", type: "checkbox", default: false },
  { name: "Send Raw PrintJSON Message", type: "checkbox", default: false },
  { name: "Send Raw ReceivedItems Message", type: "checkbox", default: false },
  { name: "Send Extracted Datapackage Messages", type: "checkbox", default: false },
]

/* Build all form fields */
const fieldSet = document.getElementById('SAMMIpelagoFormFields')
for (const field of FIELDS) {
  addField(fieldSet, field);
}

/* Handle controls */
const connectButton = document.getElementById('SAMMIpelagoConnectButton');
const disconnectButton = document.getElementById('SAMMIpelagoDisconnectButton');
connectButton.addEventListener('click', () => {
  const formDataEntries = FIELDS.map(field => {
    const fieldId = `SAMMIpelagoField${field.name}`;
    const fieldElement = document.getElementById(fieldId);
    const fieldType = fieldElement.type;
    const fieldValue = fieldType === "checkbox" ? fieldElement.checked : fieldElement.value;
    window.localStorage.setItem(fieldId, fieldValue);
    return [
      field.name,
      fieldValue,
    ];
  });

  [...document.querySelectorAll('#SAMMIpelagoFormFields input')].forEach(input => input.disabled = true);
  connectButton.disabled = true;
  disconnectButton.disabled = false;
  sammipelagoConnect(Object.fromEntries(formDataEntries));
});

disconnectButton.addEventListener('click', () => {
  sammipelagoDisconnect();
  [...document.querySelectorAll('#SAMMIpelagoFormFields input')].forEach(input => input.disabled = false);
  connectButton.disabled = false;
  disconnectButton.disabled = true;
});
</script>


[insert_command]


[insert_hook]


[insert_script]
const SAMMIPELAGO_MESSAGE_BUFFER_THROTTLE_DELAY_MS = 200;
const SAMMIPELAGO_MAX_MESSAGE_LENGTH = 64000; // Experimentally this seems to fall somewhere between 70,000-80,000
const SAMMIPELAGO_MESSAGE_BUFFER = [];
let SAMMIPELAGO_MESSAGE_BUFFER_TIMEOUT_ID = null;

let SAMMIPELAGO_WEBSOCKET = null;
let SAMMIPELAGO_ROOMINFO = null;
let SAMMIPELAGO_PLAYER_SLOT = null;
let SAMMIPELAGO_PLAYER_LIST = null;
let SAMMIPELAGO_GAME_LIST = null
let SAMMIPELAGO_SLOT_INFO = null;
let SAMMIPELAGO_DATA_GAME_ITEMS = null;
let SAMMIPELAGO_DATA_GAME_LOCATIONS = null;

function addToMessageBuffer(triggerName, triggerData) {
  SAMMIPELAGO_MESSAGE_BUFFER.push([triggerName, triggerData]);
}

function startSendingBufferMessages() {
  if ((SAMMIPELAGO_MESSAGE_BUFFER.length > 0) && (SAMMIPELAGO_MESSAGE_BUFFER_TIMEOUT_ID === null)) {
    sendNextMessageFromBuffer();
  }
}

function sendNextMessageFromBuffer() {
  if (SAMMIPELAGO_MESSAGE_BUFFER.length > 0) {
    const message = SAMMIPELAGO_MESSAGE_BUFFER.shift();
    SAMMI.triggerExt(...message);
    SAMMIPELAGO_MESSAGE_BUFFER_TIMEOUT_ID = setTimeout(sendNextMessageFromBuffer, SAMMIPELAGO_MESSAGE_BUFFER_THROTTLE_DELAY_MS);
  } else {
    SAMMIPELAGO_MESSAGE_BUFFER_TIMEOUT_ID = null;
  }
}

function invertDictionary(input) {
  return Object.fromEntries( Object.entries(input).map(([k,v]) => [v,k]) )
}

function translateIdToName(type, id, playerId = null) {
  let response = id;
  let game = null;
  switch (type) {
    case "player_id":
      response = SAMMIPELAGO_SLOT_INFO[id.toString()].name;
      break;

    case "item_id":
      game = SAMMIPELAGO_SLOT_INFO[playerId.toString()].game;
      response = SAMMIPELAGO_DATA_GAME_ITEMS[game][id.toString()];
      break;
    
    case "location_id":
      game = SAMMIPELAGO_SLOT_INFO[playerId.toString()].game;
      response = SAMMIPELAGO_DATA_GAME_LOCATIONS[game][id.toString()];
      break;
    
    default:
      break;
  }

  return response;
}

// TODO: Refactor this to a class to better handle state.  In the mean time:
let SAMMIPELAGO_IS_CONNECTING = false;
let SAMMIPELAGO_SERVER_VERSION = null;

function sammipelagoConnect(details) {
  const CONTROLLED_RAW_MESSAGE_TYPES = {
    "SAMMIpelago Bounced_Raw": details["Send Raw Bounced Message"],
    "SAMMIpelago DataPackage_Raw": details["Send Raw Datapackage Messages"],
    "SAMMIpelago LocationInfo_Raw": details["Send Raw LocationInfo Message"],
    "SAMMIpelago PrintJSON_Raw": details["Send Raw PrintJSON Message"],
    "SAMMIpelago ReceivedItems_Raw": details["Send Raw ReceivedItems Message"],
  }

  const SEND_EXTRACTED_DATAPACKAGE_MESSAGES = details["Send Extracted Datapackage Messages"];

  if (SAMMIPELAGO_WEBSOCKET) {
    SAMMIPELAGO_WEBSOCKET.close();
  }

  SAMMIPELAGO_WEBSOCKET = new WebSocket(`wss://${details.Server}:${details.Port}`);

  SAMMIPELAGO_WEBSOCKET.addEventListener("open", () => {
    addToMessageBuffer('SAMMIpelago Websocket Connected', {});
    SAMMIPELAGO_IS_CONNECTING = true;
  });

  SAMMIPELAGO_WEBSOCKET.addEventListener("message", (event) => {
    const messages = JSON.parse(event.data);

    for (const message of messages) {
      switch(message.cmd) {
        case "RoomInfo":
          SAMMIPELAGO_GAME_LIST = message.games;
          if (SAMMIPELAGO_IS_CONNECTING) {
            SAMMIPELAGO_SERVER_VERSION = message.version;
            SAMMIPELAGO_WEBSOCKET.send( JSON.stringify([{ cmd: "GetDataPackage" }]) );
          }
          break;

        case "DataPackage":
          const games = message.data.games;

          SAMMIPELAGO_DATA_GAME_ITEMS = {};
          SAMMIPELAGO_DATA_GAME_LOCATIONS = {};
          for (const game of SAMMIPELAGO_GAME_LIST) {
            SAMMIPELAGO_DATA_GAME_ITEMS[game] = invertDictionary(games[game].item_name_to_id);
            SAMMIPELAGO_DATA_GAME_LOCATIONS[game] = invertDictionary(games[game].location_name_to_id);

            if (game !== "Archipelago") {
              if (CONTROLLED_RAW_MESSAGE_TYPES["SAMMIpelago DataPackage_Raw"]) {
                addToMessageBuffer(`SAMMIpelago DataPackage_Raw ${game}`, {
                  item_name_to_id: games[game].item_name_to_id,
                  location_name_to_id: games[game].location_name_to_id,
                });
              }
  
              if (SEND_EXTRACTED_DATAPACKAGE_MESSAGES) {
                addToMessageBuffer(`SAMMIpelago DataPackage ${game}`, {
                  item_id_to_name: SAMMIPELAGO_DATA_GAME_ITEMS[game],
                  location_id_to_name: SAMMIPELAGO_DATA_GAME_LOCATIONS[game],
                });
              }
            }
          }

          delete message.data;

          if (SAMMIPELAGO_IS_CONNECTING) {
            SAMMIPELAGO_WEBSOCKET.send(JSON.stringify([{
              cmd: "Connect",
              password: details.Password,
              game: null,
              name: details.Name, 
              version: SAMMIPELAGO_SERVER_VERSION,
              uuid: "Testing",
              items_handling: 7, 
              tags: [ "Tracker", "TextOnly" ], 
              slot_data: true
            }]));  
          }
          break;
          
        case "Connected":
          SAMMIPELAGO_IS_CONNECTING = false;
          SAMMIPELAGO_PLAYER_LIST = message.players;
          SAMMIPELAGO_PLAYER_SLOT = message.slot;
          SAMMIPELAGO_SLOT_INFO = message.slot_info;

          addToMessageBuffer('SAMMIpelago Connected_Processed', {
            ...message,
            missing_locations: message.missing_locations.map(locationId => translateIdToName("location_id", locationId, message.slot)),
            checked_locations: message.checked_locations.map(locationId => translateIdToName("location_id", locationId, message.slot)),
          });

          break;

        case "ConnectionRefused":
          SAMMIPELAGO_IS_CONNECTING = false;
          console.log(`Connection was refused:\n${JSON.stringify(message)}`)
          SAMMIPELAGO_WEBSOCKET.close();
          break;

        case "ReceivedItems":
          console.log(JSON.stringify(message, null, 2));
          addToMessageBuffer('SAMMIpelago ReceivedItems_Processed', {
            ...message,
            items: message.items.map(item => ({
              ...item,
              item: translateIdToName("item_id", item.item, SAMMIPELAGO_PLAYER_SLOT),
              location: translateIdToName("location_id", item.location, item.player),
              player: translateIdToName("player_id", item.player),
            })),
          });
          break;

        case "PrintJSON":
          const messageParts = message.data.map(part => {
            if (part.type) {
              part.text = translateIdToName(part.type, part.text, part.player);
            };
            return part;
          });
          const combinedMessage = message.data.reduce((msg, part) => msg + part.text, "");

          switch(message.type) {
            case "ItemSend":
            case "ItemCheat":
            case "Hint":
              addToMessageBuffer('SAMMIpelago PrintJSON_Processed', {
                ...message,
                data: messageParts,
                message: combinedMessage,
                receiving: translateIdToName("player_id", message.receiving),
                item: {
                  ...message.item,
                  item: translateIdToName("item_id", message.item.item, message.receiving),
                  location: translateIdToName("location_id", message.item.location, message.item.player),
                  player: translateIdToName("player_id", message.item.player),
                }
              });
              break;
          
            case "Join":
            case "Part":
            case "Chat":
            case "Goal":
            case "Release":
            case "Collect":
              addToMessageBuffer('SAMMIpelago PrintJSON_Processed', {
                ...message,
                data: messageParts,
                message: combinedMessage,
                slot: SAMMIPELAGO_SLOT_INFO[message.slot].name,
              });
              break;

            default:
              addToMessageBuffer('SAMMIpelago PrintJSON_Processed', {
                ...message,
                data: messageParts,
                message: combinedMessage,
              });
              break;
          }
  
        default:
          break;
      }

      const rawMessageTypeName = `SAMMIpelago ${message.cmd}_Raw`;
      const messageControlName = Object.keys(CONTROLLED_RAW_MESSAGE_TYPES).filter(controlName => rawMessageTypeName.startsWith(controlName));
      if ((messageControlName.length === 0) || CONTROLLED_RAW_MESSAGE_TYPES[messageControlName]) {
        addToMessageBuffer(rawMessageTypeName, message);
      }
    }

    startSendingBufferMessages();
  });

  SAMMIPELAGO_WEBSOCKET.addEventListener("close", (...a) => {
    console.log(`Websocket closed: ${a.join('\n')}`);
    SAMMIPELAGO_WEBSOCKET = null;
    SAMMIPELAGO_ROOMINFO = null;
    SAMMIPELAGO_PLAYER_LIST = null;
    SAMMIPELAGO_PLAYER_SLOT = null;
    SAMMIPELAGO_SLOT_INFO = null;
    SAMMIPELAGO_DATA_GAME_ITEMS = null;
    SAMMIPELAGO_DATA_GAME_LOCATIONS = null;
    SAMMIPELAGO_SERVER_VERSION = null;
    SAMMIPELAGO_IS_CONNECTING = false;

    const connectButton = document.getElementById('SAMMIpelagoConnectButton');
    const disconnectButton = document.getElementById('SAMMIpelagoDisconnectButton');
    connectButton.disabled = false;
    disconnectButton.disabled = true;
  });
}

function sammipelagoDisconnect() {
  SAMMIPELAGO_WEBSOCKET.close();
}

[insert_over]
{ "deck_data": "{ \"background_color\": 4194859.0, \"on\": true, \"grid_y\": 6.0, \"snap_grid\": 1.0, \"lb_version\": \"2024.2.2\", \"background_image\": \"\", \"sammi_version\": \"2024.2.2\", \"encrypted\": false, \"adaptive_resizing\": 1.0, \"unique_id\": \"20240709101600960988530\", \"button_list\": [ { \"color\": 7866048.0, \"persistent\": 1.0, \"text\": \"Open\\nText\\nGuide\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 136.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"https:\\\/\\\/docs.google.com\\\/document\\\/d\\\/1TLdXEvEttrpAO0HhtxrtCHOQoRcQzSiuueUMl4NHldo\\\/edit?usp=sharing\" } ], \"press_type\": 0.0, \"x\": 0.83333333333333337034076748750522, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"SAMMIpelago_Text_Guide\", \"button_duration\": 0.0, \"y\": 0.1666666666666666574148081281237, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 12590166.0, \"persistent\": 1.0, \"text\": \"Open\\nVideo\\nGuide\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ ], \"press_type\": 0.0, \"x\": 0.83333333333333337034076748750522, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"SAMMIpelago_Video_Guide\", \"button_duration\": 0.0, \"y\": 0.33333333333333331482961625624739, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 64.0, \"stretch\": 0.0 }, { \"color\": 5526720.0, \"persistent\": 1.0, \"text\": \"Report\\nIssue\\n(Opens Github)\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ ], \"press_type\": 0.0, \"x\": 0.83333333333333337034076748750522, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"SAMMIpelago_Github\", \"button_duration\": 0.0, \"y\": 0.5, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 64.0, \"stretch\": 0.0 }, { \"color\": 12583052.0, \"persistent\": 1.0, \"text\": \"EDIT ME\\nFOR EXAMPLE DECK NOTES\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 4.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 400.0, \"b0\": \"All buttons in this deck start with an \\\"enable_button\\\" Local Variable command.\\nIf this command is disbled (check box at the right), the the button will stop itself.\\nThis is so you can enable only one or two buttons instead of the entire deck to test things.\\n\\nAll example buttons except the first two are disabled initially. \\n\\nBe sure to check out the documentation and\\\/or the video for more in depth instructions!\\n\\n(I include both text and video documentation to help as many folks as possible)\", \"v0\": 0.0, \"name\": \"\" } ], \"press_type\": 0.0, \"x\": 0.0, \"is_transparent\": 0.0, \"border\": 3.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.66666666666666662965923251249478, \"button_id\": \"SAMMIpelago_Instructions\", \"button_duration\": 0.0, \"y\": 0.1666666666666666574148081281237, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 192.0, \"persistent\": 1.0, \"text\": \"INITIALIZATION\\n(Activates when\\nSAMMIpelago connects)\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 4.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 146.0, \"b0\": \"This button activates and will hold all relevant variables for the other buttons in this deck.\\n\\nThis button will pull the initial connected information (SAMMIPelago Connected_Raw) and \\nfill out variables for other buttons in this deck to pull.\\n\\nThe information pulled are Player names, their slots, and the game they are playing.\\n\\nIf you are using other buttons in this example deck, do not disable this one!\", \"v0\": 0.0, \"name\": \"\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"When button is triggered, pull the Connection data into an object\", \"v0\": 1.0 }, { \"b1\": \"all\", \"cmd\": 66.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"connected_raw\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Reset initial variables\", \"v0\": 2.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 4.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"total_players\", \"b2\": \"1\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 5.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"current_player\", \"b2\": \"1\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 6.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Figure out total number of players by getting the size of connected_raw.players\", \"v0\": 1.0 }, { \"b1\": \"total_players\", \"cmd\": 100.0, \"obsid\": \"Main\", \"pos\": 7.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"connected_raw.players\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 8.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Loop through the connected_raw.slot_info to get each player's name, slot, and game\", \"v0\": 8.0 }, { \"cmd\": 9.0, \"obsid\": \"Main\", \"pos\": 9.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"total_players\", \"v0\": 7.0 }, { \"b1\": \"\", \"cmd\": 318.0, \"obsid\": \"Main\", \"pos\": 10.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"(\\\"connected_raw.slot_info.\\\/$current_player$\\\/.name\\\")\", \"b2\": \"current_slot_name\" }, { \"b1\": \"\\\/$current_slot_name$\\\/\", \"cmd\": 162.0, \"obsid\": \"Main\", \"pos\": 11.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago_Init\", \"b2\": \"player_\\\/$current_player$\\\/_name\" }, { \"b1\": \"\\\/$current_slot_name$\\\/\", \"cmd\": 162.0, \"obsid\": \"Main\", \"pos\": 12.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago_Init\", \"b2\": \"temp_name\" }, { \"b1\": \"\", \"cmd\": 318.0, \"obsid\": \"Main\", \"pos\": 13.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"(\\\"connected_raw.slot_info.\\\/$current_player$\\\/.game\\\")\", \"b2\": \"current_slot_game\" }, { \"b1\": \"\\\/$current_slot_game$\\\/\", \"cmd\": 162.0, \"obsid\": \"Main\", \"pos\": 14.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago_Init\", \"b2\": \"player_\\\/$current_player$\\\/_game\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 15.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"\\\/$temp_name$\\\/\", \"b2\": \"current_player\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 16.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"current_player\", \"b2\": \"(current_player+1)\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 17.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Determine own slot, name, and game\", \"v0\": 5.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 18.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"own_slot\", \"b2\": \"SAMMIpelago_Init.connected_raw.slot\" }, { \"b1\": \"\", \"cmd\": 318.0, \"obsid\": \"Main\", \"pos\": 19.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"(\\\"connected_raw.slot_info.\\\/$own_slot$\\\/.game\\\")\", \"b2\": \"own_game_var\" }, { \"b1\": \"\\\/$own_game_var$\\\/\", \"cmd\": 162.0, \"obsid\": \"Main\", \"pos\": 20.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago_Init\", \"b2\": \"own_game\" }, { \"b1\": \"\", \"cmd\": 318.0, \"obsid\": \"Main\", \"pos\": 21.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"(\\\"connected_raw.slot_info.\\\/$own_slot$\\\/.name\\\")\", \"b2\": \"own_name_var\" }, { \"b1\": \"\\\/$own_name_var$\\\/\", \"cmd\": 162.0, \"obsid\": \"Main\", \"pos\": 22.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago_Init\", \"b2\": \"own_name\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 23.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Clean up non useful variables\", \"v0\": 5.0 }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 24.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"own_name_var\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 25.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"own_game_var\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 26.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"current_slot_game\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 27.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"current_slot_name\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 28.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"current_player\" } ], \"press_type\": 0.0, \"x\": 0.0, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ { \"case_sensitive\": 0.0, \"message\": \"SAMMIpelago Connected_Raw\", \"group_id\": \"\", \"button_id\": \"SAMMIpelago_Init\", \"trg\": 12.0, \"allow_empty_wildcard\": 0.0 } ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.33333333333333331482961625624739, \"button_id\": \"SAMMIpelago_Init\", \"button_duration\": 0.0, \"y\": 0.33333333333333331482961625624739, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 81.0, \"stretch\": 1.0 }, { \"color\": 1145024.0, \"persistent\": 1.0, \"text\": \"Item Unlock\\nBasic Notification\\nExample\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 4.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 205.0, \"b0\": \"This button activates when any item is sent, whether it involves your game or not.\\n\\nIt does this by activating on the Extension Trigger: SAMMIpelago PrintJSON_Processed, \\nand watching for type: ItemSend.\\n\\nIt then uses the data sent to this button and the Initialization button to \\ncompile the notification message. The message changes depending on who sends the item\\nand who it is for.\\n\\nNOTE : This simple button WILL get very spammy when someone hits their goal.\\nWe highly suggest making your own button to take this into account.\", \"v0\": 0.0, \"name\": \"\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Disable the first \\\"Set Local Variable\\\" to disable this button.\", \"v0\": 3.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"enable_button\", \"b2\": \"\\\"true\\\"\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 3.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"enable_button\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"\\\"false\\\"\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 133.0, \"v1\": 0.0, \"obsid\": \"Main\", \"pos\": 4.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago_basic_item_example\", \"v0\": 1.0, \"v2\": 1.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 5.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 33.0, \"b0\": \"Pull the sent data and check to see if it is type: ItemSend. If not, stop button.\", \"v0\": 3.0 }, { \"b1\": \"all\", \"cmd\": 66.0, \"obsid\": \"Main\", \"pos\": 6.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"printjson_processed\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 1.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 7.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"printjson_processed.type\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"\\\"ItemSend\\\"\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 0.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 133.0, \"v1\": 0.0, \"obsid\": \"Main\", \"pos\": 8.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago_basic_item_example\", \"v0\": 1.0, \"v2\": 1.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 9.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Pull the information on the item, the sender, and the receiver\", \"v0\": 5.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 10.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"sent_by\", \"b2\": \"printjson_processed.item.player\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 11.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"sent_to\", \"b2\": \"printjson_processed.receiving\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 12.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"item\", \"b2\": \"printjson_processed.item.item\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 13.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"location\", \"b2\": \"printjson_processed.item.location\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 14.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"your_name\", \"b2\": \"SAMMIpelago_Init.own_name\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 15.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 56.0, \"b0\": \"Determine the type of ItemSend it is (You sending, you finding, you receiving, or none)\\nWe first check if either sent_by or sent_to is ourselves\\nThen we check if an item is sent by and to the same person (found item)\\nThen if the item involves us, we determine if we sent it, or received it.\", \"v0\": 10.0 }, { \"b53\": \"\", \"b5\": \"your_name\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"sent_to\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 1.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 16.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 25.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"sent_by\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"your_name\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 2.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 2.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 17.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"my_item\", \"b2\": \"\\\"true\\\"\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 18.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"my_item\", \"b2\": \"\\\"false\\\"\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 5.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 19.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"sent_by\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"sent_to\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 20.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"send_type\", \"b2\": \"\\\"found\\\"\" }, { \"b53\": \"\", \"b5\": \"\\\"true\\\"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"my_item\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 3.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 21.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 25.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"sent_by\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"your_name\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 1.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 2.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 22.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"send_type\", \"b2\": \"\\\"sent\\\"\" }, { \"b53\": \"\", \"b5\": \"\\\"true\\\"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"my_item\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 1.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 23.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 25.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"sent_to\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"your_name\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 1.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 2.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 24.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"send_type\", \"b2\": \"\\\"received\\\"\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 25.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"send_type\", \"b2\": \"\\\"other\\\"\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 26.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 16.0, \"b0\": \"Construct the message depending on the different variable combinations\\nof my_item and send_type\", \"v0\": 13.0 }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 5.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 27.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"my_item\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"\\\"true\\\"\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 7.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 24.0, \"obsid\": \"Main\", \"pos\": 28.0, \"v3\": { \"default\": 0.0, \"received\": 31.0, \"sent\": 33.0, \"found\": 29.0 }, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"send_type\", \"v0\": 6.0 }, { \"b5\": \"\", \"b13\": \"\", \"b19\": \"\", \"b17\": \"\", \"b1\": \"\", \"b7\": \"\", \"b11\": \"\", \"b9\": \"\", \"b15\": \"\", \"b3\": \"\", \"cmd\": 26.0, \"obsid\": \"Main\", \"pos\": 29.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b16\": \"\", \"b0\": \"found\", \"b18\": \"\", \"b4\": \"\", \"b12\": \"\", \"b14\": \"\", \"b2\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"\", \"v0\": 1.0, \"v2\": 1.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 30.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"item_message\", \"b2\": \"(\\\"You found your \\\" + item + \\\"! It was located at your \\\" + location + \\\"!\\\")\" }, { \"b5\": \"\", \"b13\": \"\", \"b19\": \"\", \"b17\": \"\", \"b1\": \"\", \"b7\": \"\", \"b11\": \"\", \"b9\": \"\", \"b15\": \"\", \"b3\": \"\", \"cmd\": 26.0, \"obsid\": \"Main\", \"pos\": 31.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b16\": \"\", \"b0\": \"received\", \"b18\": \"\", \"b4\": \"\", \"b12\": \"\", \"b14\": \"\", \"b2\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"\", \"v0\": 1.0, \"v2\": 1.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 32.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"item_message\", \"b2\": \"(sent_by + \\\" sent you \\\" + item + \\\"! They found it at their \\\" + location + \\\"!\\\")\" }, { \"b5\": \"\", \"b13\": \"\", \"b19\": \"\", \"b17\": \"\", \"b1\": \"\", \"b7\": \"\", \"b11\": \"\", \"b9\": \"\", \"b15\": \"\", \"b3\": \"\", \"cmd\": 26.0, \"obsid\": \"Main\", \"pos\": 33.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b16\": \"\", \"b0\": \"sent\", \"b18\": \"\", \"b4\": \"\", \"b12\": \"\", \"b14\": \"\", \"b2\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"\", \"v0\": 1.0, \"v2\": 1.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 34.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"item_message\", \"b2\": \"(\\\"You sent \\\" + item + \\\" to \\\" + sent_to + \\\"! It was located at your \\\" + location + \\\"!\\\")\" }, { \"cmd\": 24.0, \"obsid\": \"Main\", \"pos\": 35.0, \"v3\": { \"default\": 0.0, \"found\": 36.0, \"other\": 38.0 }, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"send_type\", \"v0\": 4.0 }, { \"b5\": \"\", \"b13\": \"\", \"b19\": \"\", \"b17\": \"\", \"b1\": \"\", \"b7\": \"\", \"b11\": \"\", \"b9\": \"\", \"b15\": \"\", \"b3\": \"\", \"cmd\": 26.0, \"obsid\": \"Main\", \"pos\": 36.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b16\": \"\", \"b0\": \"found\", \"b18\": \"\", \"b4\": \"\", \"b12\": \"\", \"b14\": \"\", \"b2\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"\", \"v0\": 1.0, \"v2\": 1.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 37.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"item_message\", \"b2\": \"(sent_to + \\\" found their \\\" + item + \\\"! It was at their \\\" + location + \\\"!\\\")\" }, { \"b5\": \"\", \"b13\": \"\", \"b19\": \"\", \"b17\": \"\", \"b1\": \"\", \"b7\": \"\", \"b11\": \"\", \"b9\": \"\", \"b15\": \"\", \"b3\": \"\", \"cmd\": 26.0, \"obsid\": \"Main\", \"pos\": 38.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b16\": \"\", \"b0\": \"other\", \"b18\": \"\", \"b4\": \"\", \"b12\": \"\", \"b14\": \"\", \"b2\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"\", \"v0\": 1.0, \"v2\": 1.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 39.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"item_message\", \"b2\": \"(sent_to + \\\"'s \\\" + item + \\\" was sent by \\\" + sent_by + \\\", who found it at their \\\" + location + \\\"!\\\")\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 40.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Send the message to the SAMMI alert notification (yellow text on SAMMI main window)\", \"v0\": 1.0 }, { \"cmd\": 142.0, \"obsid\": \"Main\", \"pos\": 41.0, \"vis\": 1.0, \"ms\": 5.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"\\\/$item_message$\\\/\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 42.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Reset 'enable_button\\\" variable\", \"v0\": 1.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 43.0, \"vis\": 1.0, \"ms\": 25.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"enable_button\", \"b2\": \"\\\"false\\\"\" } ], \"press_type\": 0.0, \"x\": 0.33333333333333331482961625624739, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ { \"case_sensitive\": 0.0, \"message\": \"SAMMIpelago PrintJSON_Processed\", \"group_id\": \"\", \"button_id\": \"SAMMIpelago_basic_item_example\", \"trg\": 12.0, \"allow_empty_wildcard\": 0.0 } ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"{\\n\\\"enable_button\\\":\\\"false\\\"\\n}\", \"deck\": 31.0, \"width\": 0.33333333333333331482961625624739, \"button_id\": \"SAMMIpelago_basic_item_example\", \"button_duration\": 25.0, \"y\": 0.33333333333333331482961625624739, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 2129.0, \"stretch\": 0.0 }, { \"color\": 4440146.0, \"persistent\": 1.0, \"text\": \"Track Current\\nHint Points\\nExample\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 4.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 146.0, \"b0\": \"This button activates twice : \\n1) when the RoomInfo_Raw is sent (to track how much a hint costs)\\n2) When the Roomupdate_Raw is sent (to track how many hint points you have)\\n\\nEach time you check a location, it will compile information on your current hint progress\\nAnd send this to the alert notifications (yellow text on the main SAMMI screen)\", \"v0\": 0.0, \"name\": \"\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Disable the first \\\"Set Local Variable\\\" to disable this button.\", \"v0\": 3.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 1.0, \"xpan\": 0.0, \"b0\": \"enable_button\", \"b2\": \"\\\"true\\\"\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 3.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"enable_button\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"\\\"false\\\"\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 133.0, \"v1\": 0.0, \"obsid\": \"Main\", \"pos\": 4.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago_hint_point_tracking_example\", \"v0\": 1.0, \"v2\": 1.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 5.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Pull the data and determine which trigger it is\", \"v0\": 2.0 }, { \"b1\": \"all\", \"cmd\": 66.0, \"obsid\": \"Main\", \"pos\": 6.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"hint_point_raw\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 7.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"hint_point_type\", \"b2\": \"hint_point_raw.trigger_name\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 8.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 36.0, \"b0\": \"If this was triggered by RoomInfo, then set the hint_cost, but send no message\\nIf this was triggered by Roomupdate, then format a message\", \"v0\": 9.0 }, { \"cmd\": 24.0, \"obsid\": \"Main\", \"pos\": 9.0, \"v3\": { \"default\": 0.0, \"SAMMIpelago RoomInfo_Raw\": 10.0, \"SAMMIpelago RoomUpdate_Raw\": 12.0 }, \"vis\": 1.0, \"ms\": 2.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"hint_point_type\", \"v0\": 8.0 }, { \"b5\": \"\", \"b13\": \"\", \"b19\": \"\", \"b17\": \"\", \"b1\": \"\", \"b7\": \"\", \"b11\": \"\", \"b9\": \"\", \"b15\": \"\", \"b3\": \"\", \"cmd\": 26.0, \"obsid\": \"Main\", \"pos\": 10.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b16\": \"\", \"b0\": \"SAMMIpelago RoomInfo_Raw\", \"b18\": \"\", \"b4\": \"\", \"b12\": \"\", \"b14\": \"\", \"b2\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"\", \"v0\": 1.0, \"v2\": 1.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 11.0, \"vis\": 1.0, \"ms\": 2.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"hint_cost\", \"b2\": \"hint_point_raw.hint_cost\" }, { \"b5\": \"\", \"b13\": \"\", \"b19\": \"\", \"b17\": \"\", \"b1\": \"\", \"b7\": \"\", \"b11\": \"\", \"b9\": \"\", \"b15\": \"\", \"b3\": \"\", \"cmd\": 26.0, \"obsid\": \"Main\", \"pos\": 12.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b16\": \"\", \"b0\": \"SAMMIpelago RoomUpdate_Raw\", \"b18\": \"\", \"b4\": \"\", \"b12\": \"\", \"b14\": \"\", \"b2\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"\", \"v0\": 5.0, \"v2\": 1.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 13.0, \"vis\": 1.0, \"ms\": 2.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"hint_points\", \"b2\": \"hint_point_raw.hint_points\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \">=\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 1.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 14.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 2.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"hint_points\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"hint_cost\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 2.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 15.0, \"vis\": 1.0, \"ms\": 2.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"total_hints\", \"b2\": \"(floor(hint_points\\\/hint_cost))\" }, { \"cmd\": 142.0, \"obsid\": \"Main\", \"pos\": 16.0, \"vis\": 1.0, \"ms\": 2.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"You now have \\\/$hint_points$\\\/! You have enough for \\\/$total_hints$\\\/ hints!\" }, { \"cmd\": 142.0, \"obsid\": \"Main\", \"pos\": 17.0, \"vis\": 1.0, \"ms\": 2.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"You now have \\\/$hint_points$\\\/ hint points!\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 18.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Reset 'enable_button\\\" variable\", \"v0\": 1.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 19.0, \"vis\": 1.0, \"ms\": 25.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"enable_button\", \"b2\": \"\\\"false\\\"\" } ], \"press_type\": 0.0, \"x\": 0.0, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ { \"case_sensitive\": 0.0, \"message\": \"SAMMIpelago RoomInfo_Raw\", \"group_id\": \"\", \"button_id\": \"SAMMIpelago_hint_point_tracking_example\", \"trg\": 12.0, \"allow_empty_wildcard\": 0.0 }, { \"case_sensitive\": 0.0, \"message\": \"SAMMIpelago RoomUpdate_Raw\", \"group_id\": \"\", \"button_id\": \"SAMMIpelago_hint_point_tracking_example\", \"trg\": 12.0, \"allow_empty_wildcard\": 0.0 } ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"{\\n\\\"enable_button\\\":\\\"false\\\",\\n\\\"hint_cost\\\":10\\n}\", \"deck\": 31.0, \"width\": 0.33333333333333331482961625624739, \"button_id\": \"SAMMIpelago_hint_point_tracking_example\", \"button_duration\": 25.0, \"y\": 0.5, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 2129.0, \"stretch\": 0.0 }, { \"color\": 2452013.0, \"persistent\": 1.0, \"text\": \"Hint Relay\\nExample\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 4.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 146.0, \"b0\": \"This button watches for Hints involving you, and relays them to your alert messages\\n(The yellow text on the main screen of SAMMI)\\n\\nThis will activate each time hints are sent to you, which happens when you repeat hints,\\nask for a new hint, or someone gets or repeats their hints and you are involved with them\\n(Whether they have an item in your world, or you have an item in their world)\\n\\nIf a hinted item has already been found, it won't be repeated\", \"v0\": 0.0, \"name\": \"\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Disable the first \\\"Set Local Variable\\\" to disable this button.\", \"v0\": 3.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 1.0, \"xpan\": 0.0, \"b0\": \"enable_button\", \"b2\": \"\\\"true\\\"\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 3.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"enable_button\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"\\\"false\\\"\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 133.0, \"v1\": 0.0, \"obsid\": \"Main\", \"pos\": 4.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago_hint_point_tracking_example\", \"v0\": 1.0, \"v2\": 1.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 5.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Pull the sent data and check to see if it is type: Hint. If not, stop button.\", \"v0\": 3.0 }, { \"b1\": \"all\", \"cmd\": 66.0, \"obsid\": \"Main\", \"pos\": 6.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"printjson_processed\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 1.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 7.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"printjson_processed.type\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"\\\"Hint\\\"\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 0.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 133.0, \"v1\": 0.0, \"obsid\": \"Main\", \"pos\": 8.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago_hint_relay_example\", \"v0\": 1.0, \"v2\": 1.0 }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 9.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Pull important values\", \"v0\": 6.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 10.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"item_for\", \"b2\": \"printjson_processed.receiving\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 11.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"item_from\", \"b2\": \"printjson_processed.item.player\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 12.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"item\", \"b2\": \"printjson_processed.item.item\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 13.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"location\", \"b2\": \"printjson_processed.item.location\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 14.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"own_name\", \"b2\": \"SAMMIpelago_Init.own_slot\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 15.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"found\", \"b2\": \"printjson_processed.found\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 16.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 37.0, \"b0\": \"Start by checking if this item has already been found. If it has, stop the button. Otherwise:\\nCheck if the item is for you, or for someone else. If its for you, check if in own world.\\nThen construct message and send it to alert notifications (yellow text on main SAMMI screen)\", \"v0\": 8.0 }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 17.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"found\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"1\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 133.0, \"v1\": 0.0, \"obsid\": \"Main\", \"pos\": 18.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago_hint_relay_example\", \"v0\": 1.0, \"v2\": 1.0 }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 2.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 19.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"item_for\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"own_name\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 3.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 1.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 20.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 1.0, \"b41\": \"\", \"sel\": 0.0, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"item_for\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"item_from\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 1.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 142.0, \"obsid\": \"Main\", \"pos\": 21.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"HINT : Your \\\/$item$\\\/ is located in your own world, at \\\/$location$\\\/!\" }, { \"cmd\": 142.0, \"obsid\": \"Main\", \"pos\": 22.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"HINT : Your \\\/$item$\\\/ is located in \\\/$item_from$\\\/'s world, at \\\/$location$\\\/!\" }, { \"cmd\": 133.0, \"v1\": 0.0, \"obsid\": \"Main\", \"pos\": 23.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago_hint_relay_example\", \"v0\": 1.0, \"v2\": 1.0 }, { \"cmd\": 142.0, \"obsid\": \"Main\", \"pos\": 24.0, \"vis\": 1.0, \"ms\": 1.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"HINT : \\\/$item_for$\\\/'s \\\/$item$\\\/ is located in your world, at \\\/$location$\\\/!\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 25.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Reset 'enable_button\\\" variable\", \"v0\": 1.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 26.0, \"vis\": 1.0, \"ms\": 25.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"enable_button\", \"b2\": \"\\\"false\\\"\" } ], \"press_type\": 0.0, \"x\": 0.33333333333333331482961625624739, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ { \"case_sensitive\": 0.0, \"message\": \"SAMMIpelago PrintJSON_Raw\", \"group_id\": \"\", \"button_id\": \"SAMMIpelago_hint_relay_example\", \"trg\": 12.0, \"allow_empty_wildcard\": 0.0 } ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"{\\n\\\"enable_button\\\":\\\"false\\\",\\n\\\"hint_cost\\\":10\\n}\", \"deck\": 31.0, \"width\": 0.33333333333333331482961625624739, \"button_id\": \"SAMMIpelago_hint_relay_example\", \"button_duration\": 25.0, \"y\": 0.5, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 2129.0, \"stretch\": 0.0 }, { \"color\": 0.0, \"persistent\": 1.0, \"text\": \"SAMMIpelago\\nby Caigan and Erdenshire\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 136.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"https:\\\/\\\/caigan.carrd.co\" } ], \"press_type\": 0.0, \"x\": 0.0, \"is_transparent\": 0.0, \"border\": 8.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 1.0, \"button_id\": \"SAMMIpelago_by\", \"button_duration\": 0.0, \"y\": 0.0, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 1.0 }, { \"color\": 11310784.0, \"persistent\": 1.0, \"text\": \"Send\\nRoomInfo_Raw\\nTest Data\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 46.0, \"b0\": \"This button sends a 'test packet' that mimics one sent by SAMMIpelago.\\nThis data is copied from an actual test AP game.\\nThis is primarily to test your own buttons and see the general data structure sent.\", \"v0\": 0.0 }, { \"b1\": \"{ \\\"location_check_points\\\": 1.0, \\n\\\"datapackage_checksums\\\": { \\n\\\"ANIMAL WELL\\\": \\\"b7e93acfcef72c42d47f638a41717a7f67110e93\\\", \\n\\\"Archipelago\\\": \\\"ac9141e9ad0318df2fa27da5f20c50a842afeecb\\\", }, \\n\\\"password\\\": 0.0, \\n\\\"version\\\": { \\n\\\"build\\\": 0.0, \\n\\\"class\\\": \\\"Version\\\", \\n\\\"minor\\\": 5.0, \\n\\\"major\\\": 0.0 }, \\n\\\"cmd\\\": \\\"RoomInfo\\\", \\n\\\"permissions\\\": { \\n\\\"collect\\\": 2.0, \\n\\\"remaining\\\": 2.0, \\n\\\"release\\\": 7.0 }, \\n\\\"seed_name\\\": \\\"85271459771682734848\\\", \\n\\\"time\\\": 1721353183.2365524768829345703125, \\n\\\"games\\\": [ \\\"Archipelago\\\", \\n\\\"ANIMAL WELL\\\" ], \\n\\\"trigger_name\\\": \\\"SAMMIpelago RoomInfo_Raw\\\", \\n\\\"tags\\\": [ \\\"AP\\\", \\n\\\"WebHost\\\" ], \\n\\\"generator_version\\\": { \\n\\\"build\\\": 0.0, \\n\\\"class\\\": \\\"Version\\\", \\n\\\"minor\\\": 5.0, \\n\\\"major\\\": 0.0 }, \\n\\\"hint_cost\\\": 10.0, \\n\\\"trigger_type\\\": 12.0 }\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 397.0, \"b0\": \"data\", \"v0\": 0.0 }, { \"b1\": \"data\", \"cmd\": 193.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago RoomInfo_Raw\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"all\" } ], \"press_type\": 0.0, \"x\": 0.1666666666666666574148081281237, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"ID434\", \"button_duration\": 0.0, \"y\": 0.66666666666666662965923251249478, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 11310784.0, \"persistent\": 1.0, \"text\": \"Send\\nConnected_Processed\\nTest Data\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 46.0, \"b0\": \"This button sends a 'test packet' that mimics one sent by SAMMIpelago.\\nThis data is copied from an actual test AP game.\\nThis is primarily to test your own buttons and see the general data structure sent.\", \"v0\": 0.0 }, { \"b1\": \"{ \\\"slot_data\\\": { \\n\\\"weird_tricks\\\": 0.0, \\n\\\"matchbox\\\": 1.0, \\n\\\"bunnies_as_checks\\\": 0.0, \\n\\\"key_ring\\\": 1.0, \\n\\\"candle_checks\\\": 1.0, \\n\\\"eggs_needed\\\": 64.0, \\n\\\"goal\\\": 1.0, \\n\\\"wheel_hopping\\\": 0.0, \\n\\\"disc_hopping\\\": 0.0, \\n\\\"bubble_jumping\\\": 1.0 }, \\n\\\"checked_locations\\\": [ ], \\n\\\"cmd\\\": \\\"Connected\\\", \\n\\\"slot_info\\\": { \\n\\\"1\\\": { \\n\\\"group_members\\\": [ ], \\n\\\"class\\\": \\\"NetworkSlot\\\", \\n\\\"game\\\": \\\"ANIMAL WELL\\\", \\n\\\"type\\\": 1.0, \\n\\\"name\\\": \\\"TestPlayer\\\" }, \\n\\\"2\\\": { \\n\\\"group_members\\\": [ ], \\n\\\"class\\\": \\\"NetworkSlot\\\", \\n\\\"game\\\": \\\"ANIMAL WELL\\\", \\n\\\"type\\\": 1.0, \\n\\\"name\\\": \\\"TestPlayer2\\\" } }, \\n\\\"players\\\": [ { \\\"class\\\": \\\"NetworkPlayer\\\", \\n\\\"alias\\\": \\\"TestPlayer\\\", \\n\\\"slot\\\": 1.0, \\n\\\"team\\\": 0.0, \\n\\\"name\\\": \\\"TestPlayer\\\" }, { \\\"class\\\": \\\"NetworkPlayer\\\", \\n\\\"alias\\\": \\\"TestPlayer2\\\", \\n\\\"slot\\\": 2.0, \\n\\\"team\\\": 0.0, \\n\\\"name\\\": \\\"TestPlayer2\\\" } ], \\n\\\"hint_points\\\": 0.0, \\n\\\"missing_locations\\\": [ \\\"B. Wand Chest\\\", \\n\\\"B.B. Wand Chest\\\", \\n\\\"Yoyo Chest\\\", \\n\\\"Slink Chest\\\", \\n\\\"Animal Flute Chest\\\", \\n\\\"Top Chest\\\", \\n\\\"Lantern Chest\\\", \\n\\\"UV Lantern Chest\\\", \\n\\\"B. Ball Chest\\\", \\n\\\"Remote Chest\\\", \\n\\\"Wheel Chest\\\", \\n\\\"Mock Disc Chest\\\", \\n\\\"Fanny Pack Chest\\\", \\n\\\"Match in Tutorial Chest\\\", \\n\\\"Match in Fish Mural Room Chest\\\", \\n\\\"Match in Switch-Bounce Room Chest\\\", \\n\\\"Match by Dog Fish Pipe Chest\\\", \\n\\\"Match in Bear Area\\\", \\n\\\"Match Above Egg Room\\\", \\n\\\"Match in Center Well Chest\\\", \\n\\\"Match in Guard Room Chest\\\", \\n\\\"Match under Mouse Statue\\\", \\n\\\"Key Chest in Lower Bear\\\", \\n\\\"Key Chest in Upper Bear\\\", \\n\\\"Key Chest by Mouse Head Hitting Lever\\\", \\n\\\"Key Chest in West Frog Guard Room\\\", \\n\\\"Key Chest in East Frog Guard Room\\\", \\n\\\"Key Chest in Dog with Chinchilla Crank\\\", \\n\\\"House Key Drop\\\", \\n\\\"Office Key Chest\\\", \\n\\\"E. Medal Chest\\\", \\n\\\"S. Medal Chest\\\", \\n\\\"Reference Egg Chest\\\", \\n\\\"Brown Egg Chest\\\", \\n\\\"Raw Egg Chest\\\", \\n\\\"Pickled Egg Chest\\\", \\n\\\"Big Egg Chest\\\", \\n\\\"Swan Egg Chest\\\", \\n\\\"Forbidden Egg Chest\\\", \\n\\\"Shadow Egg Chest\\\", \\n\\\"Vanity Egg Chest\\\", \\n\\\"Egg As A Service Chest\\\", \\n\\\"Depraved Egg Chest\\\", \\n\\\"Chaos Egg Chest\\\", \\n\\\"Upside Down Egg Chest\\\", \\n\\\"Evil Egg Chest\\\", \\n\\\"Sweet Egg Chest\\\", \\n\\\"Chocolate Egg Chest\\\", \\n\\\"Value Egg Chest\\\", \\n\\\"Plant Egg Chest\\\", \\n\\\"Red Egg Chest\\\", \\n\\\"Orange Egg Chest\\\", \\n\\\"Sour Egg Chest\\\", \\n\\\"Post Modern Egg Chest\\\", \\n\\\"Universal Basic Egg Chest\\\", \\n\\\"Laissez-faire Egg Chest\\\", \\n\\\"Zen Egg Chest\\\", \\n\\\"Future Egg Chest\\\", \\n\\\"Friendship Egg Chest\\\", \\n\\\"Truth Egg Chest\\\", \\n\\\"Transcendental Egg Chest\\\", \\n\\\"Ancient Egg Chest\\\", \\n\\\"Magic Egg Chest\\\", \\n\\\"Mystic Egg Chest\\\", \\n\\\"Holiday Egg Chest\\\", \\n\\\"Rain Egg Chest\\\", \\n\\\"Razzle Egg Chest\\\", \\n\\\"Dazzle Egg Chest\\\", \\n\\\"Virtual Egg Chest\\\", \\n\\\"Normal Egg Chest\\\", \\n\\\"Great Egg Chest\\\", \\n\\\"Gorgeous Egg Chest\\\", \\n\\\"Planet Egg Chest\\\", \\n\\\"Moon Egg Chest\\\", \\n\\\"Galaxy Egg Chest\\\", \\n\\\"Sunset Egg Chest\\\", \\n\\\"Goodnight Egg Chest\\\", \\n\\\"Dream Egg Chest\\\", \\n\\\"Travel Egg Chest\\\", \\n\\\"Promise Egg Chest\\\", \\n\\\"Ice Egg Chest\\\", \\n\\\"Fire Egg Chest\\\", \\n\\\"Bubble Egg Chest\\\", \\n\\\"Desert Egg Chest\\\", \\n\\\"Clover Egg Chest\\\", \\n\\\"Brick Egg Chest\\\", \\n\\\"Neon Egg Chest\\\", \\n\\\"Iridescent Egg Chest\\\", \\n\\\"Rust Egg Chest\\\", \\n\\\"Scarlet Egg Chest\\\", \\n\\\"Sapphire Egg Chest\\\", \\n\\\"Ruby Egg Chest\\\", \\n\\\"Jade Egg Chest\\\", \\n\\\"Obsidian Egg Chest\\\", \\n\\\"Crystal Egg Chest\\\", \\n\\\"Golden Egg Chest\\\", \\n\\\"65th Egg Chest\\\", \\n\\\"Map Chest\\\", \\n\\\"Stamp Chest\\\", \\n\\\"Pencil Chest\\\", \\n\\\"Squirrel First Candle\\\", \\n\\\"Dog Dark Room Candle\\\", \\n\\\"Dog Boxed Candle\\\", \\n\\\"Dog Candle in Many Switches Room\\\", \\n\\\"Dog Candle in Disc Switch Maze\\\", \\n\\\"Dog Candle in Bat Room\\\", \\n\\\"Fish Candle in Penguin Room\\\", \\n\\\"Frog Candle Switch Carousel\\\", \\n\\\"Bear Candle in Dark Maze\\\" ], \\n\\\"slot\\\": 1.0, \\n\\\"trigger_name\\\": \\\"SAMMIpelago Connected_Processed\\\", \\n\\\"team\\\": 0.0, \\n\\\"trigger_type\\\": 12.0 }\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 397.0, \"b0\": \"data\", \"v0\": 0.0 }, { \"b1\": \"data\", \"cmd\": 193.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago Connected_Processed\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"all\" } ], \"press_type\": 0.0, \"x\": 0.0, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"ID435\", \"button_duration\": 0.0, \"y\": 0.83333333333333337034076748750522, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 12622483.0, \"persistent\": 1.0, \"text\": \"Send\\nPrintJSON_Processed\\nJoin\\nTest Data\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 46.0, \"b0\": \"This button sends a 'test packet' that mimics one sent by SAMMIpelago.\\nThis data is copied from an actual test AP game.\\nThis is primarily to test your own buttons and see the general data structure sent.\", \"v0\": 0.0 }, { \"b1\": \"{ \\\"cmd\\\": \\\"PrintJSON\\\", \\n\\\"message\\\": \\\"TestPlayer (Team #1) tracking ANIMAL WELL has joined. Client(0.5.0), ['Tracker', 'TextOnly'].\\\", \\n\\\"slot\\\": \\\"TestPlayer\\\", \\n\\\"data\\\": [ { \\\"text\\\": \\\"TestPlayer (Team #1) tracking ANIMAL WELL has joined. Client(0.5.0), ['Tracker', 'TextOnly'].\\\" } ], \\n\\\"trigger_name\\\": \\\"SAMMIpelago PrintJSON_Processed\\\", \\n\\\"type\\\": \\\"Join\\\", \\n\\\"tags\\\": [ \\\"Tracker\\\", \\n\\\"TextOnly\\\" ], \\n\\\"team\\\": 0.0, \\n\\\"trigger_type\\\": 12.0 }\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 397.0, \"b0\": \"data\", \"v0\": 0.0 }, { \"b1\": \"data\", \"cmd\": 193.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago PrintJSON_Processed\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"all\" } ], \"press_type\": 0.0, \"x\": 0.33333333333333331482961625624739, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"ID436\", \"button_duration\": 0.0, \"y\": 0.66666666666666662965923251249478, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 11310784.0, \"persistent\": 1.0, \"text\": \"Send\\nDataPackage \\nGAME (Animal Well)\\nTest Data\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 46.0, \"b0\": \"This button sends a 'test packet' that mimics one sent by SAMMIpelago.\\nThis data is copied from an actual test AP game.\\nThis is primarily to test your own buttons and see the general data structure sent.\", \"v0\": 0.0 }, { \"b1\": \"{ \\\"item_id_to_name\\\": { \\n\\\"11553429\\\": \\\"Future Egg\\\", \\n\\\"11553467\\\": \\\"Golden Egg\\\", \\n\\\"11553469\\\": \\\"Firecracker Refill\\\", \\n\\\"11553427\\\": \\\"Laissez-faire Egg\\\", \\n\\\"11553387\\\": \\\"Wheel\\\", \\n\\\"11553389\\\": \\\"Mock Disc\\\", \\n\\\"11553442\\\": \\\"Great Egg\\\", \\n\\\"11553383\\\": \\\"Lantern\\\", \\n\\\"11553448\\\": \\\"Goodnight Egg\\\", \\n\\\"11553406\\\": \\\"Raw Egg\\\", \\n\\\"11553408\\\": \\\"Big Egg\\\", \\n\\\"11553446\\\": \\\"Galaxy Egg\\\", \\n\\\"11553463\\\": \\\"Ruby Egg\\\", \\n\\\"11553423\\\": \\\"Orange Egg\\\", \\n\\\"11553440\\\": \\\"Virtual Egg\\\", \\n\\\"11553385\\\": \\\"B. Ball\\\", \\n\\\"11553425\\\": \\\"Post Modern Egg\\\", \\n\\\"11553465\\\": \\\"Obsidian Egg\\\", \\n\\\"11553421\\\": \\\"Plant Egg\\\", \\n\\\"11553461\\\": \\\"Scarlet Egg\\\", \\n\\\"11553444\\\": \\\"Planet Egg\\\", \\n\\\"11553381\\\": \\\"Animal Flute\\\", \\n\\\"11553404\\\": \\\"Reference Egg\\\", \\n\\\"11553439\\\": \\\"Dazzle Egg\\\", \\n\\\"11553437\\\": \\\"Rain Egg\\\", \\n\\\"11553397\\\": \\\"E. Medal\\\", \\n\\\"11553412\\\": \\\"Vanity Egg\\\", \\n\\\"11553452\\\": \\\"Ice Egg\\\", \\n\\\"11553399\\\": \\\"K. Shard\\\", \\n\\\"11553458\\\": \\\"Neon Egg\\\", \\n\\\"11553393\\\": \\\"Key\\\", \\n\\\"11553416\\\": \\\"Upside Down Egg\\\", \\n\\\"11553418\\\": \\\"Sweet Egg\\\", \\n\\\"11553456\\\": \\\"Clover Egg\\\", \\n\\\"11553433\\\": \\\"Ancient Egg\\\", \\n\\\"11553450\\\": \\\"Travel Egg\\\", \\n\\\"11553395\\\": \\\"House Key\\\", \\n\\\"11553410\\\": \\\"Forbidden Egg\\\", \\n\\\"11553435\\\": \\\"Mystic Egg\\\", \\n\\\"11553431\\\": \\\"Truth Egg\\\", \\n\\\"11553454\\\": \\\"Bubble Egg\\\", \\n\\\"11553391\\\": \\\"Match\\\", \\n\\\"11553414\\\": \\\"Depraved Egg\\\", \\n\\\"11553447\\\": \\\"Sunset Egg\\\", \\n\\\"11553409\\\": \\\"Swan Egg\\\", \\n\\\"11553407\\\": \\\"Pickled Egg\\\", \\n\\\"11553382\\\": \\\"Top\\\", \\n\\\"11553449\\\": \\\"Dream Egg\\\", \\n\\\"11553422\\\": \\\"Red Egg\\\", \\n\\\"11553462\\\": \\\"Sapphire Egg\\\", \\n\\\"11553426\\\": \\\"Universal Basic Egg\\\", \\n\\\"11553468\\\": \\\"65th Egg\\\", \\n\\\"11553466\\\": \\\"Crystal Egg\\\", \\n\\\"11553428\\\": \\\"Zen Egg\\\", \\n\\\"11553388\\\": \\\"Firecrackers\\\", \\n\\\"11553443\\\": \\\"Gorgeous Egg\\\", \\n\\\"11553386\\\": \\\"Remote\\\", \\n\\\"11553460\\\": \\\"Rust Egg\\\", \\n\\\"11553420\\\": \\\"Value Egg\\\", \\n\\\"11553405\\\": \\\"Brown Egg\\\", \\n\\\"11553380\\\": \\\"Slink\\\", \\n\\\"11553445\\\": \\\"Moon Egg\\\", \\n\\\"11553384\\\": \\\"UV Lantern\\\", \\n\\\"11553441\\\": \\\"Normal Egg\\\", \\n\\\"11553464\\\": \\\"Jade Egg\\\", \\n\\\"11553424\\\": \\\"Sour Egg\\\", \\n\\\"11553379\\\": \\\"Yoyo\\\", \\n\\\"11553457\\\": \\\"Brick Egg\\\", \\n\\\"11553419\\\": \\\"Chocolate Egg\\\", \\n\\\"11553417\\\": \\\"Evil Egg\\\", \\n\\\"11553377\\\": \\\"B. Wand\\\", \\n\\\"11553459\\\": \\\"Iridescent Egg\\\", \\n\\\"11553392\\\": \\\"Matchbox\\\", \\n\\\"11553432\\\": \\\"Transcendental Egg\\\", \\n\\\"11553436\\\": \\\"Holiday Egg\\\", \\n\\\"11553438\\\": \\\"Razzle Egg\\\", \\n\\\"11553453\\\": \\\"Fire Egg\\\", \\n\\\"11553398\\\": \\\"S. Medal\\\", \\n\\\"11553413\\\": \\\"Egg As A Service\\\", \\n\\\"11553396\\\": \\\"Office Key\\\", \\n\\\"11553470\\\": \\\"Big Blue Fruit\\\", \\n\\\"11553430\\\": \\\"Friendship Egg\\\", \\n\\\"11553415\\\": \\\"Chaos Egg\\\", \\n\\\"11553390\\\": \\\"F. Pack\\\", \\n\\\"11553455\\\": \\\"Desert Egg\\\", \\n\\\"11553411\\\": \\\"Shadow Egg\\\", \\n\\\"11553394\\\": \\\"Key Ring\\\", \\n\\\"11553451\\\": \\\"Promise Egg\\\", \\n\\\"11553434\\\": \\\"Magic Egg\\\" }, \\n\\\"location_id_to_name\\\": { \\n\\\"11553429\\\": \\\"Sweet Egg Chest\\\", \\n\\\"11553467\\\": \\\"Clover Egg Chest\\\", \\n\\\"11553482\\\": \\\"Pencil Chest\\\", \\n\\\"11553469\\\": \\\"Neon Egg Chest\\\", \\n\\\"11553427\\\": \\\"Upside Down Egg Chest\\\", \\n\\\"11553387\\\": \\\"Remote Chest\\\", \\n\\\"11553504\\\": \\\"Dog Candle in Bat Room\\\", \\n\\\"11553402\\\": \\\"Key Chest by Mouse Head Hitting Lever\\\", \\n\\\"11553389\\\": \\\"Mock Disc Chest\\\", \\n\\\"11553442\\\": \\\"Truth Egg Chest\\\", \\n\\\"11553383\\\": \\\"Top Chest\\\", \\n\\\"11553500\\\": \\\"Dog Dark Room Candle\\\", \\n\\\"11553448\\\": \\\"Rain Egg Chest\\\", \\n\\\"11553406\\\": \\\"House Key Drop\\\", \\n\\\"11553408\\\": \\\"E. Medal Chest\\\", \\n\\\"11553446\\\": \\\"Mystic Egg Chest\\\", \\n\\\"11553486\\\": \\\"Doodle Bunny\\\", \\n\\\"11553463\\\": \\\"Ice Egg Chest\\\", \\n\\\"11553488\\\": \\\"Fish Bunny\\\", \\n\\\"11553423\\\": \\\"Vanity Egg Chest\\\", \\n\\\"11553508\\\": \\\"Mama Cha Chest\\\", \\n\\\"11553440\\\": \\\"Future Egg Chest\\\", \\n\\\"11553385\\\": \\\"UV Lantern Chest\\\", \\n\\\"11553506\\\": \\\"Frog Candle Switch Carousel\\\", \\n\\\"11553400\\\": \\\"Key Chest in Lower Bear\\\", \\n\\\"11553425\\\": \\\"Depraved Egg Chest\\\", \\n\\\"11553465\\\": \\\"Bubble Egg Chest\\\", \\n\\\"11553480\\\": \\\"Map Chest\\\", \\n\\\"11553421\\\": \\\"Forbidden Egg Chest\\\", \\n\\\"11553484\\\": \\\"Chinchilla Bunny\\\", \\n\\\"11553461\\\": \\\"Travel Egg Chest\\\", \\n\\\"11553444\\\": \\\"Ancient Egg Chest\\\", \\n\\\"11553381\\\": \\\"Slink Chest\\\", \\n\\\"11553502\\\": \\\"Dog Candle in Many Switches Room\\\", \\n\\\"11553404\\\": \\\"Key Chest in East Frog Guard Room\\\", \\n\\\"11553439\\\": \\\"Zen Egg Chest\\\", \\n\\\"11553492\\\": \\\"Imaginary Bunny\\\", \\n\\\"11553477\\\": \\\"Crystal Egg Chest\\\", \\n\\\"11553479\\\": \\\"65th Egg Chest\\\", \\n\\\"11553437\\\": \\\"Universal Basic Egg Chest\\\", \\n\\\"11553397\\\": \\\"Match in Center Well Chest\\\", \\n\\\"11553412\\\": \\\"G. Flame\\\", \\n\\\"11553452\\\": \\\"Normal Egg Chest\\\", \\n\\\"11553399\\\": \\\"Match under Mouse Statue\\\", \\n\\\"11553458\\\": \\\"Sunset Egg Chest\\\", \\n\\\"11553393\\\": \\\"Match in Switch-Bounce Room Chest\\\", \\n\\\"11553416\\\": \\\"Brown Egg Chest\\\", \\n\\\"11553418\\\": \\\"Pickled Egg Chest\\\", \\n\\\"11553378\\\": \\\"B.B. Wand Chest\\\", \\n\\\"11553456\\\": \\\"Moon Egg Chest\\\", \\n\\\"11553473\\\": \\\"Sapphire Egg Chest\\\", \\n\\\"11553496\\\": \\\"Paper Bunny\\\", \\n\\\"11553498\\\": \\\"Disc Spike Bunny\\\", \\n\\\"11553433\\\": \\\"Red Egg Chest\\\", \\n\\\"11553450\\\": \\\"Dazzle Egg Chest\\\", \\n\\\"11553395\\\": \\\"Match in Bear Area\\\", \\n\\\"11553435\\\": \\\"Sour Egg Chest\\\", \\n\\\"11553490\\\": \\\"Singing Bunny\\\", \\n\\\"11553475\\\": \\\"Jade Egg Chest\\\", \\n\\\"11553431\\\": \\\"Value Egg Chest\\\", \\n\\\"11553471\\\": \\\"Rust Egg Chest\\\", \\n\\\"11553494\\\": \\\"Lava Bunny\\\", \\n\\\"11553454\\\": \\\"Gorgeous Egg Chest\\\", \\n\\\"11553391\\\": \\\"Match in Tutorial Chest\\\", \\n\\\"11553414\\\": \\\"P. Flame\\\", \\n\\\"11553447\\\": \\\"Holiday Egg Chest\\\", \\n\\\"11553409\\\": \\\"S. Medal Chest\\\", \\n\\\"11553407\\\": \\\"Office Key Chest\\\", \\n\\\"11553382\\\": \\\"Animal Flute Chest\\\", \\n\\\"11553501\\\": \\\"Dog Boxed Candle\\\", \\n\\\"11553449\\\": \\\"Razzle Egg Chest\\\", \\n\\\"11553422\\\": \\\"Shadow Egg Chest\\\", \\n\\\"11553489\\\": \\\"Face Bunny\\\", \\n\\\"11553487\\\": \\\"Invisible Bunny\\\", \\n\\\"11553462\\\": \\\"Promise Egg Chest\\\", \\n\\\"11553426\\\": \\\"Chaos Egg Chest\\\", \\n\\\"11553468\\\": \\\"Brick Egg Chest\\\", \\n\\\"11553466\\\": \\\"Desert Egg Chest\\\", \\n\\\"11553483\\\": \\\"Community Bunny\\\", \\n\\\"11553428\\\": \\\"Evil Egg Chest\\\", \\n\\\"11553388\\\": \\\"Wheel Chest\\\", \\n\\\"11553443\\\": \\\"Transcendental Egg Chest\\\", \\n\\\"11553403\\\": \\\"Key Chest in West Frog Guard Room\\\", \\n\\\"11553386\\\": \\\"B. Ball Chest\\\", \\n\\\"11553505\\\": \\\"Fish Candle in Penguin Room\\\", \\n\\\"11553485\\\": \\\"Water Spike Bunny\\\", \\n\\\"11553460\\\": \\\"Dream Egg Chest\\\", \\n\\\"11553420\\\": \\\"Swan Egg Chest\\\", \\n\\\"11553405\\\": \\\"Key Chest in Dog with Chinchilla Crank\\\", \\n\\\"11553380\\\": \\\"Yoyo Chest\\\", \\n\\\"11553503\\\": \\\"Dog Candle in Disc Switch Maze\\\", \\n\\\"11553445\\\": \\\"Magic Egg Chest\\\", \\n\\\"11553401\\\": \\\"Key Chest in Upper Bear\\\", \\n\\\"11553384\\\": \\\"Lantern Chest\\\", \\n\\\"11553507\\\": \\\"Bear Candle in Dark Maze\\\", \\n\\\"11553441\\\": \\\"Friendship Egg Chest\\\", \\n\\\"11553464\\\": \\\"Fire Egg Chest\\\", \\n\\\"11553481\\\": \\\"Stamp Chest\\\", \\n\\\"11553424\\\": \\\"Egg As A Service Chest\\\", \\n\\\"11553379\\\": \\\"Wolf Disc Shrine\\\", \\n\\\"11553457\\\": \\\"Galaxy Egg Chest\\\", \\n\\\"11553419\\\": \\\"Big Egg Chest\\\", \\n\\\"11553417\\\": \\\"Raw Egg Chest\\\", \\n\\\"11553377\\\": \\\"B. Wand Chest\\\", \\n\\\"11553459\\\": \\\"Goodnight Egg Chest\\\", \\n\\\"11553392\\\": \\\"Match in Fish Mural Room Chest\\\", \\n\\\"11553432\\\": \\\"Plant Egg Chest\\\", \\n\\\"11553499\\\": \\\"Squirrel First Candle\\\", \\n\\\"11553472\\\": \\\"Scarlet Egg Chest\\\", \\n\\\"11553497\\\": \\\"Statue Bunny\\\", \\n\\\"11553436\\\": \\\"Post Modern Egg Chest\\\", \\n\\\"11553478\\\": \\\"Golden Egg Chest\\\", \\n\\\"11553493\\\": \\\"Flowering Bunny\\\", \\n\\\"11553476\\\": \\\"Obsidian Egg Chest\\\", \\n\\\"11553438\\\": \\\"Laissez-faire Egg Chest\\\", \\n\\\"11553453\\\": \\\"Great Egg Chest\\\", \\n\\\"11553398\\\": \\\"Match in Guard Room Chest\\\", \\n\\\"11553413\\\": \\\"V. Flame\\\", \\n\\\"11553396\\\": \\\"Match Above Egg Room\\\", \\n\\\"11553470\\\": \\\"Iridescent Egg Chest\\\", \\n\\\"11553495\\\": \\\"Flashing Bunny\\\", \\n\\\"11553430\\\": \\\"Chocolate Egg Chest\\\", \\n\\\"11553415\\\": \\\"Reference Egg Chest\\\", \\n\\\"11553390\\\": \\\"Fanny Pack Chest\\\", \\n\\\"11553455\\\": \\\"Planet Egg Chest\\\", \\n\\\"11553411\\\": \\\"B. Flame\\\", \\n\\\"11553394\\\": \\\"Match by Dog Fish Pipe Chest\\\", \\n\\\"11553451\\\": \\\"Virtual Egg Chest\\\", \\n\\\"11553491\\\": \\\"Illusion Bunny\\\", \\n\\\"11553474\\\": \\\"Ruby Egg Chest\\\", \\n\\\"11553434\\\": \\\"Orange Egg Chest\\\" }, \\n\\\"trigger_name\\\": \\\"SAMMIpelago DataPackage ANIMAL WELL\\\", \\n\\\"trigger_type\\\": 12.0 }\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 397.0, \"b0\": \"data\", \"v0\": 0.0 }, { \"b1\": \"data\", \"cmd\": 193.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago DataPackage ANIMAL WELL\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"all\" } ], \"press_type\": 0.0, \"x\": 0.33333333333333331482961625624739, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"ID437\", \"button_duration\": 0.0, \"y\": 0.83333333333333337034076748750522, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 11310784.0, \"persistent\": 1.0, \"text\": \"Send\\nPrintJSON_Processed\\nItemSend\\nTest Data\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 46.0, \"b0\": \"This button sends a 'test packet' that mimics one sent by SAMMIpelago.\\nThis data is copied from an actual test AP game.\\nThis is primarily to test your own buttons and see the general data structure sent.\", \"v0\": 0.0 }, { \"b1\": \"{ \\\"cmd\\\": \\\"PrintJSON\\\", \\n\\\"receiving\\\": \\\"TestPlayer2\\\", \\n\\\"message\\\": \\\"TestPlayer sent Firecracker Refill to TestPlayer2 (Clover Egg Chest)\\\", \\n\\\"data\\\": [ { \\\"text\\\": \\\"TestPlayer\\\", \\n\\\"type\\\": \\\"player_id\\\" }, { \\\"text\\\": \\\" sent \\\" }, { \\\"text\\\": \\\"Firecracker Refill\\\", \\n\\\"flags\\\": 0.0, \\n\\\"player\\\": 3.0, \\n\\\"type\\\": \\\"item_id\\\" }, { \\\"text\\\": \\\" to \\\" }, { \\\"text\\\": \\\"TestPlayer2\\\", \\n\\\"type\\\": \\\"player_id\\\" }, { \\\"text\\\": \\\" (\\\" }, { \\\"text\\\": \\\"Clover Egg Chest\\\", \\n\\\"player\\\": 1.0, \\n\\\"type\\\": \\\"location_id\\\" }, { \\\"text\\\": \\\")\\\" } ], \\n\\\"trigger_name\\\": \\\"SAMMIpelago PrintJSON_Processed\\\", \\n\\\"type\\\": \\\"ItemSend\\\", \\n\\\"item\\\": { \\n\\\"location\\\": \\\"Clover Egg Chest\\\", \\n\\\"flags\\\": 0.0, \\n\\\"class\\\": \\\"NetworkItem\\\", \\n\\\"player\\\": \\\"TestPlayer\\\", \\n\\\"item\\\": \\\"Firecracker Refill\\\" }, \\n\\\"trigger_type\\\": 12.0 }\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 397.0, \"b0\": \"data\", \"v0\": 0.0 }, { \"b1\": \"data\", \"cmd\": 193.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago PrintJSON_Processed\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"all\" } ], \"press_type\": 0.0, \"x\": 0.5, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"ID438\", \"button_duration\": 0.0, \"y\": 0.66666666666666662965923251249478, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 12622483.0, \"persistent\": 1.0, \"text\": \"Send\\nRoomUpdate_Raw\\nTest Data\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 46.0, \"b0\": \"This button sends a 'test packet' that mimics one sent by SAMMIpelago.\\nThis data is copied from an actual test AP game.\\nThis is primarily to test your own buttons and see the general data structure sent.\", \"v0\": 0.0 }, { \"b1\": \"{ \\\"checked_locations\\\": [ 11553467.0 ], \\n\\\"cmd\\\": \\\"RoomUpdate\\\", \\n\\\"hint_points\\\": 25.0, \\n\\\"trigger_name\\\": \\\"SAMMIpelago RoomUpdate_Raw\\\", \\n\\\"trigger_type\\\": 12.0 }\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 397.0, \"b0\": \"data\", \"v0\": 0.0 }, { \"b1\": \"data\", \"cmd\": 193.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago RoomUpdate_Raw\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"all\" } ], \"press_type\": 0.0, \"x\": 0.1666666666666666574148081281237, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"ID439\", \"button_duration\": 0.0, \"y\": 0.83333333333333337034076748750522, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 12622483.0, \"persistent\": 1.0, \"text\": \"Send\\nPrintJSON_Processed\\nHint\\nTest Data\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 46.0, \"b0\": \"This button sends a 'test packet' that mimics one sent by SAMMIpelago.\\nThis data is copied from an actual test AP game.\\nThis is primarily to test your own buttons and see the general data structure sent.\", \"v0\": 0.0 }, { \"b1\": \"{ \\\"cmd\\\": \\\"PrintJSON\\\", \\n\\\"receiving\\\": \\\"TestPlayer\\\", \\n\\\"message\\\": \\\"[Hint]: TestPlayer's Yoyo is at The Tenacious - Achievement in PlayerTest2's World. (not found)\\\", \\n\\\"found\\\": 0.0, \\n\\\"data\\\": [ { \\\"text\\\": \\\"[Hint]: \\\" }, { \\\"text\\\": \\\"TestPlayer\\\", \\n\\\"type\\\": \\\"player_id\\\" }, { \\\"text\\\": \\\"'s \\\" }, { \\\"text\\\": \\\"Yoyo\\\", \\n\\\"flags\\\": 3.0, \\n\\\"player\\\": 1.0, \\n\\\"type\\\": \\\"item_id\\\" }, { \\\"text\\\": \\\" is at \\\" }, { \\\"text\\\": \\\"The Tenacious - Achievement\\\", \\n\\\"player\\\": 4.0, \\n\\\"type\\\": \\\"location_id\\\" }, { \\\"text\\\": \\\" in \\\" }, { \\\"text\\\": \\\"TestPlayer2\\\", \\n\\\"type\\\": \\\"player_id\\\" }, { \\\"text\\\": \\\"'s World\\\" }, { \\\"text\\\": \\\". \\\" }, { \\\"color\\\": \\\"red\\\", \\n\\\"text\\\": \\\"(not found)\\\", \\n\\\"type\\\": \\\"color\\\" } ], \\n\\\"trigger_name\\\": \\\"SAMMIpelago PrintJSON_Processed\\\", \\n\\\"type\\\": \\\"Hint\\\", \\n\\\"item\\\": { \\n\\\"location\\\": \\\"The Tenacious - Achievement\\\", \\n\\\"flags\\\": 3.0, \\n\\\"class\\\": \\\"NetworkItem\\\", \\n\\\"player\\\": \\\"TestPlayer2\\\", \\n\\\"item\\\": \\\"Yoyo\\\" }, \\n\\\"trigger_type\\\": 12.0 }\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 393.0, \"b0\": \"data\", \"v0\": 0.0 }, { \"b1\": \"data\", \"cmd\": 193.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago PrintJSON_Processed\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"all\" } ], \"press_type\": 0.0, \"x\": 0.66666666666666662965923251249478, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"ID440\", \"button_duration\": 0.0, \"y\": 0.66666666666666662965923251249478, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 12622483.0, \"persistent\": 1.0, \"text\": \"Send\\nPrintJSON_Processed\\nChat\\nTest Data\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 46.0, \"b0\": \"This button sends a 'test packet' that mimics one sent by SAMMIpelago.\\nThis data is copied from an actual test AP game.\\nThis is primarily to test your own buttons and see the general data structure sent.\", \"v0\": 0.0 }, { \"b1\": \"{ \\\"cmd\\\": \\\"PrintJSON\\\", \\n\\\"message\\\": \\\"TestPlayer: Test Chat message\\\", \\n\\\"slot\\\": \\\"TestPlayer\\\", \\n\\\"data\\\": [ { \\\"text\\\": \\\"TestPlayer: Test Chat message\\\" } ], \\n\\\"trigger_name\\\": \\\"SAMMIpelago PrintJSON_Processed\\\", \\n\\\"type\\\": \\\"Chat\\\", \\n\\\"team\\\": 0.0, \\n\\\"trigger_type\\\": 12.0 }\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 397.0, \"b0\": \"data\", \"v0\": 0.0 }, { \"b1\": \"data\", \"cmd\": 193.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago PrintJSON_Processed\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"all\" } ], \"press_type\": 0.0, \"x\": 0.5, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"ID441\", \"button_duration\": 0.0, \"y\": 0.83333333333333337034076748750522, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 11310784.0, \"persistent\": 1.0, \"text\": \"Send\\nPrintJSON_Processed\\nGoal\\nTest Data\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 46.0, \"b0\": \"This button sends a 'test packet' that mimics one sent by SAMMIpelago.\\nThis data is copied from an actual test AP game.\\nThis is primarily to test your own buttons and see the general data structure sent.\", \"v0\": 0.0 }, { \"b1\": \"{ \\\"cmd\\\": \\\"PrintJSON\\\", \\n\\\"message\\\": \\\"TestPlayer (Team #1) has completed their goal.\\\", \\n\\\"slot\\\": \\\"TestPlayer\\\", \\n\\\"data\\\": [ { \\\"text\\\": \\\"TestPlayer (Team #1) has completed their goal.\\\" } ], \\n\\\"trigger_name\\\": \\\"SAMMIpelago PrintJSON_Processed\\\", \\n\\\"type\\\": \\\"Goal\\\", \\n\\\"team\\\": 0.0, \\n\\\"trigger_type\\\": 12.0 }\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 397.0, \"b0\": \"data\", \"v0\": 0.0 }, { \"b1\": \"data\", \"cmd\": 193.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago PrintJSON_Processed\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"all\" } ], \"press_type\": 0.0, \"x\": 0.66666666666666662965923251249478, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"ID442\", \"button_duration\": 0.0, \"y\": 0.83333333333333337034076748750522, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 11310784.0, \"persistent\": 1.0, \"text\": \"Send\\nPrintJSON_Processed\\nRelease\\nTest Data\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 46.0, \"b0\": \"This button sends a 'test packet' that mimics one sent by SAMMIpelago.\\nThis data is copied from an actual test AP game.\\nThis is primarily to test your own buttons and see the general data structure sent.\", \"v0\": 0.0 }, { \"b1\": \"{ \\\"cmd\\\": \\\"PrintJSON\\\", \\n\\\"message\\\": \\\"TestPlayer (Team #1) has released all remaining items from their world.\\\", \\n\\\"slot\\\": \\\"Playertest\\\", \\n\\\"data\\\": [ { \\\"text\\\": \\\"TestPlayer (Team #1) has released all remaining items from their world.\\\" } ], \\n\\\"trigger_name\\\": \\\"SAMMIpelago PrintJSON_Processed\\\", \\n\\\"type\\\": \\\"Release\\\", \\n\\\"team\\\": 0.0, \\n\\\"trigger_type\\\": 12.0 }\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 397.0, \"b0\": \"data\", \"v0\": 0.0 }, { \"b1\": \"data\", \"cmd\": 193.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago PrintJSON_Processed\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"all\" } ], \"press_type\": 0.0, \"x\": 0.83333333333333337034076748750522, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"ID443\", \"button_duration\": 0.0, \"y\": 0.66666666666666662965923251249478, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 12622483.0, \"persistent\": 1.0, \"text\": \"Send\\nPrintJSON_Processed\\nCollect\\nTest Data\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 46.0, \"b0\": \"This button sends a 'test packet' that mimics one sent by SAMMIpelago.\\nThis data is copied from an actual test AP game.\\nThis is primarily to test your own buttons and see the general data structure sent.\", \"v0\": 0.0 }, { \"b1\": \"{ \\\"cmd\\\": \\\"PrintJSON\\\", \\n\\\"message\\\": \\\"TestPlayer (Team #1) has collected their items from other worlds.\\\", \\n\\\"slot\\\": \\\"TestPlayer\\\", \\n\\\"data\\\": [ { \\\"text\\\": \\\"TestPlayer (Team #1) has collected their items from other worlds.\\\" } ], \\n\\\"trigger_name\\\": \\\"SAMMIpelago PrintJSON_Processed\\\", \\n\\\"type\\\": \\\"Collect\\\", \\n\\\"team\\\": 0.0, \\n\\\"trigger_type\\\": 12.0 }\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 397.0, \"b0\": \"data\", \"v0\": 0.0 }, { \"b1\": \"data\", \"cmd\": 193.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago PrintJSON_Processed\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"all\" } ], \"press_type\": 0.0, \"x\": 0.83333333333333337034076748750522, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"ID444\", \"button_duration\": 0.0, \"y\": 0.83333333333333337034076748750522, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 12622483.0, \"persistent\": 1.0, \"text\": \"Send\\nConnected_Raw\\nTest Data\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 46.0, \"b0\": \"This button sends a 'test packet' that mimics one sent by SAMMIpelago.\\nThis data is copied from an actual test AP game.\\nThis is primarily to test your own buttons and see the general data structure sent.\", \"v0\": 0.0 }, { \"b1\": \"{ \\\"slot_data\\\": { \\n\\\"weird_tricks\\\": 0.0, \\n\\\"matchbox\\\": 1.0, \\n\\\"bunnies_as_checks\\\": 0.0, \\n\\\"key_ring\\\": 1.0, \\n\\\"candle_checks\\\": 1.0, \\n\\\"eggs_needed\\\": 64.0, \\n\\\"goal\\\": 1.0, \\n\\\"wheel_hopping\\\": 0.0, \\n\\\"disc_hopping\\\": 0.0, \\n\\\"bubble_jumping\\\": 1.0 }, \\n\\\"checked_locations\\\": [ ], \\n\\\"cmd\\\": \\\"Connected\\\", \\n\\\"slot_info\\\": { \\n\\\"1\\\": { \\n\\\"group_members\\\": [ ], \\n\\\"class\\\": \\\"NetworkSlot\\\", \\n\\\"game\\\": \\\"ANIMAL WELL\\\", \\n\\\"type\\\": 1.0, \\n\\\"name\\\": \\\"TestPlayer\\\" }, \\n\\\"2\\\": { \\n\\\"group_members\\\": [ ], \\n\\\"class\\\": \\\"NetworkSlot\\\", \\n\\\"game\\\": \\\"ANIMAL WELL\\\", \\n\\\"type\\\": 1.0, \\n\\\"name\\\": \\\"TestPlayer2\\\" } }, \\n\\\"players\\\": [ { \\\"class\\\": \\\"NetworkPlayer\\\", \\n\\\"alias\\\": \\\"TestPlayer\\\", \\n\\\"slot\\\": 1.0, \\n\\\"team\\\": 0.0, \\n\\\"name\\\": \\\"TestPlayer\\\" }, { \\\"class\\\": \\\"NetworkPlayer\\\", \\n\\\"alias\\\": \\\"TestPlayer2\\\", \\n\\\"slot\\\": 2.0, \\n\\\"team\\\": 0.0, \\n\\\"name\\\": \\\"TestPlayer2\\\" } ], \\n\\\"hint_points\\\": 0.0, \\n\\\"missing_locations\\\": [ 11553377.0, 11553378.0, 11553380.0, 11553381.0, 11553382.0, 11553383.0, 11553384.0, 11553385.0, 11553386.0, 11553387.0, 11553388.0, 11553389.0, 11553390.0, 11553391.0, 11553392.0, 11553393.0, 11553394.0, 11553395.0, 11553396.0, 11553397.0, 11553398.0, 11553399.0, 11553400.0, 11553401.0, 11553402.0, 11553403.0, 11553404.0, 11553405.0, 11553406.0, 11553407.0, 11553408.0, 11553409.0, 11553415.0, 11553416.0, 11553417.0, 11553418.0, 11553419.0, 11553420.0, 11553421.0, 11553422.0, 11553423.0, 11553424.0, 11553425.0, 11553426.0, 11553427.0, 11553428.0, 11553429.0, 11553430.0, 11553431.0, 11553432.0, 11553433.0, 11553434.0, 11553435.0, 11553436.0, 11553437.0, 11553438.0, 11553439.0, 11553440.0, 11553441.0, 11553442.0, 11553443.0, 11553444.0, 11553445.0, 11553446.0, 11553447.0, 11553448.0, 11553449.0, 11553450.0, 11553451.0, 11553452.0, 11553453.0, 11553454.0, 11553455.0, 11553456.0, 11553457.0, 11553458.0, 11553459.0, 11553460.0, 11553461.0, 11553462.0, 11553463.0, 11553464.0, 11553465.0, 11553466.0, 11553467.0, 11553468.0, 11553469.0, 11553470.0, 11553471.0, 11553472.0, 11553473.0, 11553474.0, 11553475.0, 11553476.0, 11553477.0, 11553478.0, 11553479.0, 11553480.0, 11553481.0, 11553482.0, 11553499.0, 11553500.0, 11553501.0, 11553502.0, 11553503.0, 11553504.0, 11553505.0, 11553506.0, 11553507.0 ], \\n\\\"slot\\\": 1.0, \\n\\\"trigger_name\\\": \\\"SAMMIpelago Connected_Raw\\\", \\n\\\"team\\\": 0.0, \\n\\\"trigger_type\\\": 12.0 }\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 397.0, \"b0\": \"data\", \"v0\": 0.0 }, { \"b1\": \"data\", \"cmd\": 193.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMIpelago Connected_Raw\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"all\" } ], \"press_type\": 0.0, \"x\": 0.0, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 31.0, \"width\": 0.1666666666666666574148081281237, \"button_id\": \"ID448\", \"button_duration\": 0.0, \"y\": 0.66666666666666662965923251249478, \"switch_deck\": \"\", \"height\": 0.1666666666666666574148081281237, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 } ], \"deck_name\": \"SAMMIpelago Example\", \"grid_x\": 6.0, \"stretch\": 0.0 }", "unique_id": "20240709101600960988530", "include_image": { } }